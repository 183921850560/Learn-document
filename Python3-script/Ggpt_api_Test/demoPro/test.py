import time
import re
import os
import webbrowser
import random

from urllib3 import encode_multipart_formdata
import requests


dd = {
    "d1": "$sds",
    "d2": 123
}
str1 = str(dd)
print(str1)
str1 = str1.replace("$sds", str(1231))

print(str1)

print(eval(str1))
# url = "http://10.10.0.244:10080/dsp/material/v2/upload"
# data = {}
# filename = "123.jpg"
# filepath = "/Users/zhengqiang/123.jpg"
# header = {"token": "123456789"}
# data['Filedata']= (filename,open(filepath,'rb').read())
# encode_data = encode_multipart_formdata(data)
# data = encode_data[0]
# header['Content-Type'] = encode_data[1]
# r = requests.post(url, headers=header, data=data)
# print(r.text)
# print(r.headers)

#
#
# reg = r'(\w*\d+\w+)'
# str_tmp = """"Cookie": "JSESSOINID=12SSSSSAA123222CSASc324dwd1eedq2e1" """
# str2 = "user_login_"
# str3 = "\'name\': \'dds\'"
# d1 = {
#     "ID": 1,
#     "Code": [{'name': 'dds'}, {"sex": "male"}],
#     "ddes": 'waw',
#     "dict": {
#         "dict": '121.0.0.2',
#         "port": 903
#     },
#     "pb": (12, ["21", "ls"], {'db': '123'})
# }
#
# print(d1.keys())
# str_d = str(d1)
# a = re.findall(str3, str_d)
#
# # a = re.sub(reg, "10000", str_tmp)
#
# print(a)

# a = '  asawwq  \n'
# print("".join(a.split()),end=' ')
# def f(a):
#     d = {"ID": 1,
#          "Code": [{'name': 'dds'}, {"sex": "male"}],
#          "ddes": 'waw',
#          "dict": {
#              "dict": '121.0.0.2',
#              "port": 903
#          },
#          "pb": (12, ["21", "ls"], {'db': '123'})
#          }
#     return d.get(a)
#
#
# def find(k, dc):
#     if k in dc.keys():
#         print(dc[k])
#     else:
#         for i in dc.keys():
#             if isinstance(dc[i], dict):
#                 if k in dc[i].keys():
#                     print(dc[i][k])
#                 else:
#                     find(k, dc[i])
#             elif isinstance(dc[i], (list, tuple)):
#                 for l in dc[i]:
#                     if isinstance(l, dict):
#                         if k in l.keys():
#                             print(l[k])


# find('pb', d)
#
# a = 'key(id:1)'
# if a.startswith('key'):
#     l,l1= re.findall(r'[^()]+', a)
#     # print(l1)
#
# ls = {
#     '11': 12,
#     'id': False
# }
#
#
# ss = 'sd'
# s = 'sdrrrr'
#
# # if ss.find(s) == 1 or s == ss:
# #     print('dddddd')
# #
#
# # if not s.startswith('a') or not s.startswith('d'):
#     # print('dasdadsad')
#
# lld = 'time(1522829077000:1522859077000)'
# #t1 = int('1522829077000')
# #t2 = int('1522859077000')
# tt = re.findall(r'[^()]+', lld)[1].split(':')
#
# t1, t2 = list(map(eval, re.findall(r'[^()]+', lld)[1].split(':')))
# t = 1522859077000
# print(t1, t2)
# if t in range(t1, t2+1):
#     print('ok')
#
# ll=['330108003-0007-0173']
#
# a = 200
# for l in range(200):
#     s = '330108003-0007-0%s'% str(a+l)
#     ll.append(s)

# print(ll)

# s = 'size(<=10)'
# s1 = re.findall(r'[^()]+', s)
# s2 = re.findall(r'\d+|\D+',s1[1])


# d =  ['330108003-0007-0173', '330108003-0007-0200', '330108003-0007-0201', '330108003-0007-0202', '330108003-0007-0203', '330108003-0007-0204', '330108003-0007-0205', '330108003-0007-0206', '330108003-0007-0207', '330108003-0007-0208', '330108003-0007-0209', '330108003-0007-0210', '330108003-0007-0211', '330108003-0007-0212', '330108003-0007-0213', '330108003-0007-0214', '330108003-0007-0215', '330108003-0007-0216', '330108003-0007-0217', '330108003-0007-0218', '330108003-0007-0219', '330108003-0007-0220', '330108003-0007-0221', '330108003-0007-0222', '330108003-0007-0223', '330108003-0007-0224', '330108003-0007-0225', '330108003-0007-0226', '330108003-0007-0227', '330108003-0007-0228', '330108003-0007-0229', '330108003-0007-0230', '330108003-0007-0231', '330108003-0007-0232', '330108003-0007-0233', '330108003-0007-0234', '330108003-0007-0235', '330108003-0007-0236', '330108003-0007-0237', '330108003-0007-0238', '330108003-0007-0239', '330108003-0007-0240', '330108003-0007-0241', '330108003-0007-0242', '330108003-0007-0243', '330108003-0007-0244', '330108003-0007-0245', '330108003-0007-0246', '330108003-0007-0247', '330108003-0007-0248', '330108003-0007-0249', '330108003-0007-0250', '330108003-0007-0251', '330108003-0007-0252', '330108003-0007-0253', '330108003-0007-0254', '330108003-0007-0255', '330108003-0007-0256', '330108003-0007-0257', '330108003-0007-0258', '330108003-0007-0259', '330108003-0007-0260', '330108003-0007-0261', '330108003-0007-0262', '330108003-0007-0263', '330108003-0007-0264', '330108003-0007-0265', '330108003-0007-0266', '330108003-0007-0267', '330108003-0007-0268', '330108003-0007-0269', '330108003-0007-0270', '330108003-0007-0271', '330108003-0007-0272', '330108003-0007-0273', '330108003-0007-0274', '330108003-0007-0275', '330108003-0007-0276', '330108003-0007-0277', '330108003-0007-0278', '330108003-0007-0279', '330108003-0007-0280', '330108003-0007-0281', '330108003-0007-0282', '330108003-0007-0283', '330108003-0007-0284', '330108003-0007-0285', '330108003-0007-0286', '330108003-0007-0287', '330108003-0007-0288', '330108003-0007-0289', '330108003-0007-0290', '330108003-0007-0291', '330108003-0007-0292', '330108003-0007-0293', '330108003-0007-0294', '330108003-0007-0295', '330108003-0007-0296', '330108003-0007-0297', '330108003-0007-0298', '330108003-0007-0299', '330108003-0007-0300', '330108003-0007-0301', '330108003-0007-0302', '330108003-0007-0303', '330108003-0007-0304', '330108003-0007-0305', '330108003-0007-0306', '330108003-0007-0307', '330108003-0007-0308', '330108003-0007-0309', '330108003-0007-0310', '330108003-0007-0311', '330108003-0007-0312', '330108003-0007-0313', '330108003-0007-0314', '330108003-0007-0315', '330108003-0007-0316', '330108003-0007-0317', '330108003-0007-0318', '330108003-0007-0319', '330108003-0007-0320', '330108003-0007-0321', '330108003-0007-0322', '330108003-0007-0323', '330108003-0007-0324', '330108003-0007-0325', '330108003-0007-0326', '330108003-0007-0327', '330108003-0007-0328', '330108003-0007-0329', '330108003-0007-0330', '330108003-0007-0331', '330108003-0007-0332', '330108003-0007-0333', '330108003-0007-0334', '330108003-0007-0335', '330108003-0007-0336', '330108003-0007-0337', '330108003-0007-0338', '330108003-0007-0339', '330108003-0007-0340', '330108003-0007-0341', '330108003-0007-0342', '330108003-0007-0343', '330108003-0007-0344', '330108003-0007-0345', '330108003-0007-0346', '330108003-0007-0347', '330108003-0007-0348', '330108003-0007-0349', '330108003-0007-0350', '330108003-0007-0351', '330108003-0007-0352', '330108003-0007-0353', '330108003-0007-0354', '330108003-0007-0355', '330108003-0007-0356', '330108003-0007-0357', '330108003-0007-0358', '330108003-0007-0359', '330108003-0007-0360', '330108003-0007-0361', '330108003-0007-0362', '330108003-0007-0363', '330108003-0007-0364', '330108003-0007-0365', '330108003-0007-0366', '330108003-0007-0367', '330108003-0007-0368', '330108003-0007-0369', '330108003-0007-0370', '330108003-0007-0371', '330108003-0007-0372', '330108003-0007-0373', '330108003-0007-0374', '330108003-0007-0375', '330108003-0007-0376', '330108003-0007-0377', '330108003-0007-0378', '330108003-0007-0379', '330108003-0007-0380', '330108003-0007-0381', '330108003-0007-0382', '330108003-0007-0383', '330108003-0007-0384', '330108003-0007-0385', '330108003-0007-0386', '330108003-0007-0387', '330108003-0007-0388', '330108003-0007-0389', '330108003-0007-0390', '330108003-0007-0391', '330108003-0007-0392', '330108003-0007-0393', '330108003-0007-0394', '330108003-0007-0395', '330108003-0007-0396', '330108003-0007-0397', '330108003-0007-0398', '330108003-0007-0399', '330108003-0007-0173', '330108003-0007-0200', '330108003-0007-0201', '330108003-0007-0202', '330108003-0007-0203', '330108003-0007-0204', '330108003-0007-0205', '330108003-0007-0206', '330108003-0007-0207', '330108003-0007-0208', '330108003-0007-0209', '330108003-0007-0210', '330108003-0007-0211', '330108003-0007-0212', '330108003-0007-0213', '330108003-0007-0214', '330108003-0007-0215', '330108003-0007-0216', '330108003-0007-0217', '330108003-0007-0218', '330108003-0007-0219', '330108003-0007-0220', '330108003-0007-0221', '330108003-0007-0222', '330108003-0007-0223', '330108003-0007-0224', '330108003-0007-0225', '330108003-0007-0226', '330108003-0007-0227', '330108003-0007-0228', '330108003-0007-0229', '330108003-0007-0230', '330108003-0007-0231', '330108003-0007-0232', '330108003-0007-0233', '330108003-0007-0234', '330108003-0007-0235', '330108003-0007-0236', '330108003-0007-0237', '330108003-0007-0238', '330108003-0007-0239', '330108003-0007-0240', '330108003-0007-0241', '330108003-0007-0242', '330108003-0007-0243', '330108003-0007-0244', '330108003-0007-0245', '330108003-0007-0246', '330108003-0007-0247', '330108003-0007-0248', '330108003-0007-0249', '330108003-0007-0250', '330108003-0007-0251', '330108003-0007-0252', '330108003-0007-0253', '330108003-0007-0254', '330108003-0007-0255', '330108003-0007-0256', '330108003-0007-0257', '330108003-0007-0258', '330108003-0007-0259', '330108003-0007-0260', '330108003-0007-0261', '330108003-0007-0262', '330108003-0007-0263', '330108003-0007-0264', '330108003-0007-0265', '330108003-0007-0266', '330108003-0007-0267', '330108003-0007-0268', '330108003-0007-0269', '330108003-0007-0270', '330108003-0007-0271', '330108003-0007-0272', '330108003-0007-0273', '330108003-0007-0274', '330108003-0007-0275', '330108003-0007-0276', '330108003-0007-0277', '330108003-0007-0278', '330108003-0007-0279', '330108003-0007-0280', '330108003-0007-0281', '330108003-0007-0282', '330108003-0007-0283', '330108003-0007-0284', '330108003-0007-0285', '330108003-0007-0286', '330108003-0007-0287', '330108003-0007-0288', '330108003-0007-0289', '330108003-0007-0290', '330108003-0007-0291', '330108003-0007-0292', '330108003-0007-0293', '330108003-0007-0294', '330108003-0007-0295', '330108003-0007-0296', '330108003-0007-0297', '330108003-0007-0298', '330108003-0007-0299']
#
# a = '6:5'
# c, v = list(map(eval, a.split(":")))
#
# path = os.path.abspath('../TestCase/')
# def case_file(path):
#     file_list = os.listdir(path)
#     file_list.sort(key=str.lower)
#     for f_name in file_list:
#         if f_name == '.DS_Store' or f_name[-3:] == "tmp" or f_name[-4:] == 'conf' or f_name.startswith('tmp'):
#             continue
#         elif os.path.isdir(os.path.join(path, f_name)):
#             if os.path.exists(path+'caseList.conf'):
#                 print("path + f_name + '/'")
#             case_file(os.path.join(path, f_name))
#         else:
#             if f_name.lower()[-3:] != 'yml' or len(re.findall(r'tmp', f_name)) > 0:
#                 continue
#             print(os.path.join(path, f_name))
#
# ss = time.strftime('%Y-%m-%d %H:%M:%S',time.localtime(time.time()))
#
# d = {"type":1, "code":["33"]}
# s_str = ""
# for key, value in d.items():
#     s_str += "'{0}':{1},".format(key, value)
#
#
# c1 = 2570
# b1 = 2570
# print(c1 is b1)